{"ast":null,"code":"import _objectSpread from \"/home/asmane/vtc/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync(data, name) {\n  function check(errorMessage) {\n    return function (checkResult) {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n  return function (value, rules) {\n    var promises = rules.map(function (rule) {\n      var onValid = rule.onValid,\n        errorMessage = rule.errorMessage,\n        params = rule.params;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, _objectSpread(_objectSpread({}, params), {}, {\n        name: Array.isArray(name) ? name.join('.') : name\n      }))));\n    });\n    return Promise.all(promises).then(function (results) {\n      return results.find(function (item) {\n        return item && (item === null || item === void 0 ? void 0 : item.hasError);\n      });\n    });\n  };\n}\nexport default createValidatorAsync;","map":{"version":3,"names":["formatErrorMessage","createValidatorAsync","data","name","check","errorMessage","checkResult","hasError","array","value","rules","promises","map","rule","onValid","params","Promise","resolve","then","_objectSpread","Array","isArray","join","all","results","find","item"],"sources":["/home/asmane/vtc/node_modules/schema-typed/src/utils/createValidatorAsync.ts"],"sourcesContent":["import { CheckResult, RuleType } from '../types';\nimport formatErrorMessage from './formatErrorMessage';\n\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync<V, D, E>(data?: D, name?: string | string[]) {\n  function check(errorMessage?: E | string) {\n    return (checkResult: CheckResult<E> | boolean): CheckResult<E> | null => {\n      if (checkResult === false) {\n        return { hasError: true, errorMessage };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n\n  return (value: V, rules: RuleType<V, D, E>[]) => {\n    const promises = rules.map(rule => {\n      const { onValid, errorMessage, params } = rule;\n      return Promise.resolve(onValid(value, data, name)).then(\n        check(\n          formatErrorMessage<E>(errorMessage, {\n            ...params,\n            name: Array.isArray(name) ? name.join('.') : name\n          })\n        )\n      );\n    });\n\n    return Promise.all(promises).then(results =>\n      results.find((item: CheckResult<E> | null) => item && item?.hasError)\n    );\n  };\n}\n\nexport default createValidatorAsync;\n"],"mappings":";AACA,OAAOA,kBAAkB,MAAM,sBAAsB;AAErD;;;;AAIA,OAAM,SAAUC,oBAAoBA,CAAUC,IAAQ,EAAEC,IAAwB;EAC9E,SAASC,KAAKA,CAACC,YAAyB;IACtC,OAAO,UAACC,WAAqC,EAA2B;MACtE,IAAIA,WAAW,KAAK,KAAK,EAAE;QACzB,OAAO;UAAEC,QAAQ,EAAE,IAAI;UAAEF,YAAY,EAAZA;QAAY,CAAE;OACxC,MAAM,IAAI,OAAOC,WAAW,KAAK,QAAQ,KAAKA,WAAW,CAACC,QAAQ,IAAID,WAAW,CAACE,KAAK,CAAC,EAAE;QACzF,OAAOF,WAAW;;MAEpB,OAAO,IAAI;IACb,CAAC;EACH;EAEA,OAAO,UAACG,KAAQ,EAAEC,KAA0B,EAAI;IAC9C,IAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAG,CAAC,UAAAC,IAAI,EAAG;MAChC,IAAQC,OAAO,GAA2BD,IAAI,CAAtCC,OAAO;QAAET,YAAY,GAAaQ,IAAI,CAA7BR,YAAY;QAAEU,MAAM,GAAKF,IAAI,CAAfE,MAAM;MACrC,OAAOC,OAAO,CAACC,OAAO,CAACH,OAAO,CAACL,KAAK,EAAEP,IAAI,EAAEC,IAAI,CAAC,CAAC,CAACe,IAAI,CACrDd,KAAK,CACHJ,kBAAkB,CAAIK,YAAY,EAAAc,aAAA,CAAAA,aAAA,KAC7BJ,MAAM;QACTZ,IAAI,EAAEiB,KAAK,CAACC,OAAO,CAAClB,IAAI,CAAC,GAAGA,IAAI,CAACmB,IAAI,CAAC,GAAG,CAAC,GAAGnB;MAAI,EAClD,CAAC,CACH,CACF;IACH,CAAC,CAAC;IAEF,OAAOa,OAAO,CAACO,GAAG,CAACZ,QAAQ,CAAC,CAACO,IAAI,CAAC,UAAAM,OAAO;MAAA,OACvCA,OAAO,CAACC,IAAI,CAAC,UAACC,IAA2B;QAAA,OAAKA,IAAI,KAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEnB,QAAQ;MAAA,EAAC;IAAA,EACtE;EACH,CAAC;AACH;AAEA,eAAeN,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
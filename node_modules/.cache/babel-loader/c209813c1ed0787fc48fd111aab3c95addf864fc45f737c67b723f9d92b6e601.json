{"ast":null,"code":"import _slicedToArray from \"/home/asmane/vtc/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/asmane/vtc/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/asmane/vtc/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nexport var Schema = /*#__PURE__*/function () {\n  function Schema(schema) {\n    _classCallCheck(this, Schema);\n    this.spec = schema;\n  }\n  _createClass(Schema, [{\n    key: \"getFieldType\",\n    value: function getFieldType(fieldName) {\n      var _a;\n      return (_a = this.spec) === null || _a === void 0 ? void 0 : _a[fieldName];\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return Object.keys(this.spec);\n    }\n  }, {\n    key: \"setSchemaOptionsForAllType\",\n    value: function setSchemaOptionsForAllType(data) {\n      var _this = this;\n      if (data === this.data) {\n        return;\n      }\n      Object.entries(this.spec).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          type = _ref2[1];\n        type.setSchemaOptions(_this.spec, data === null || data === void 0 ? void 0 : data[key]);\n      });\n      this.data = data;\n    }\n  }, {\n    key: \"checkForField\",\n    value: function checkForField(fieldName, data) {\n      this.setSchemaOptionsForAllType(data);\n      var fieldChecker = this.spec[fieldName];\n      if (!fieldChecker) {\n        // fieldValue can be anything if no schema defined\n        return {\n          hasError: false\n        };\n      }\n      return fieldChecker.check(data[fieldName], data, fieldName);\n    }\n  }, {\n    key: \"checkForFieldAsync\",\n    value: function checkForFieldAsync(fieldName, data) {\n      this.setSchemaOptionsForAllType(data);\n      var fieldChecker = this.spec[fieldName];\n      if (!fieldChecker) {\n        // fieldValue can be anything if no schema defined\n        return Promise.resolve({\n          hasError: false\n        });\n      }\n      return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n    }\n  }, {\n    key: \"check\",\n    value: function check(data) {\n      var _this2 = this;\n      var checkResult = {};\n      Object.keys(this.spec).forEach(function (key) {\n        if (typeof data === 'object') {\n          checkResult[key] = _this2.checkForField(key, data);\n        }\n      });\n      return checkResult;\n    }\n  }, {\n    key: \"checkAsync\",\n    value: function checkAsync(data) {\n      var _this3 = this;\n      var checkResult = {};\n      var promises = [];\n      var keys = [];\n      Object.keys(this.spec).forEach(function (key) {\n        keys.push(key);\n        promises.push(_this3.checkForFieldAsync(key, data));\n      });\n      return Promise.all(promises).then(function (values) {\n        for (var i = 0; i < values.length; i += 1) {\n          checkResult[keys[i]] = values[i];\n        }\n        return checkResult;\n      });\n    }\n  }]);\n  return Schema;\n}();\nexport function SchemaModel(o) {\n  return new Schema(o);\n}\nSchemaModel.combine = function combine() {\n  for (var _len = arguments.length, specs = new Array(_len), _key = 0; _key < _len; _key++) {\n    specs[_key] = arguments[_key];\n  }\n  return new Schema(specs.map(function (model) {\n    return model.spec;\n  }).reduce(function (accumulator, currentValue) {\n    return Object.assign(accumulator, currentValue);\n  }, {}));\n};","map":{"version":3,"names":["Schema","schema","_classCallCheck","spec","_createClass","key","value","getFieldType","fieldName","_a","getKeys","Object","keys","setSchemaOptionsForAllType","data","_this","entries","forEach","_ref","_ref2","_slicedToArray","type","setSchemaOptions","checkForField","fieldChecker","hasError","check","checkForFieldAsync","Promise","resolve","checkAsync","_this2","checkResult","_this3","promises","push","all","then","values","i","length","SchemaModel","o","combine","_len","arguments","specs","Array","_key","map","model","reduce","accumulator","currentValue","assign"],"sources":["/home/asmane/vtc/node_modules/schema-typed/src/Schema.ts"],"sourcesContent":["import { SchemaDeclaration, SchemaCheckResult, CheckResult, PlainObject } from './types';\nimport { MixedType } from './MixedType';\n\nexport class Schema<DataType = any, ErrorMsgType = string> {\n  readonly spec: SchemaDeclaration<DataType, ErrorMsgType>;\n  private data: PlainObject;\n\n  constructor(schema: SchemaDeclaration<DataType, ErrorMsgType>) {\n    this.spec = schema;\n  }\n\n  getFieldType<T extends keyof DataType>(fieldName: T) {\n    return this.spec?.[fieldName];\n  }\n\n  getKeys() {\n    return Object.keys(this.spec);\n  }\n\n  setSchemaOptionsForAllType(data: PlainObject) {\n    if (data === this.data) {\n      return;\n    }\n\n    Object.entries(this.spec).forEach(([key, type]) => {\n      (type as MixedType).setSchemaOptions(this.spec as any, data?.[key]);\n    });\n\n    this.data = data;\n  }\n\n  checkForField<T extends keyof DataType>(fieldName: T, data: DataType) {\n    this.setSchemaOptionsForAllType(data);\n\n    const fieldChecker = this.spec[fieldName];\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return { hasError: false };\n    }\n\n    return fieldChecker.check((data[fieldName] as unknown) as never, data, fieldName as string);\n  }\n\n  checkForFieldAsync<T extends keyof DataType>(\n    fieldName: T,\n    data: DataType\n  ): Promise<CheckResult<ErrorMsgType | string>> {\n    this.setSchemaOptionsForAllType(data);\n\n    const fieldChecker = this.spec[fieldName];\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return Promise.resolve({ hasError: false });\n    }\n    return fieldChecker.checkAsync(\n      (data[fieldName] as unknown) as never,\n      data,\n      fieldName as string\n    );\n  }\n\n  check<T extends keyof DataType>(data: DataType) {\n    const checkResult: PlainObject = {};\n    Object.keys(this.spec).forEach(key => {\n      if (typeof data === 'object') {\n        checkResult[key] = this.checkForField(key as T, data);\n      }\n    });\n\n    return checkResult as SchemaCheckResult<DataType, ErrorMsgType>;\n  }\n\n  checkAsync<T extends keyof DataType>(data: DataType) {\n    const checkResult: PlainObject = {};\n    const promises: Promise<CheckResult<ErrorMsgType | string>>[] = [];\n    const keys: string[] = [];\n\n    Object.keys(this.spec).forEach((key: string) => {\n      keys.push(key);\n      promises.push(this.checkForFieldAsync(key as T, data));\n    });\n\n    return Promise.all(promises).then(values => {\n      for (let i = 0; i < values.length; i += 1) {\n        checkResult[keys[i]] = values[i];\n      }\n      return checkResult as SchemaCheckResult<DataType, ErrorMsgType>;\n    });\n  }\n}\n\nexport function SchemaModel<DataType = PlainObject, ErrorMsgType = string>(\n  o: SchemaDeclaration<DataType, ErrorMsgType>\n) {\n  return new Schema<DataType, ErrorMsgType>(o);\n}\n\nSchemaModel.combine = function combine<DataType = any, ErrorMsgType = string>(\n  ...specs: Schema<any, ErrorMsgType>[]\n) {\n  return new Schema<DataType, ErrorMsgType>(\n    specs\n      .map(model => model.spec)\n      .reduce((accumulator, currentValue) => Object.assign(accumulator, currentValue), {} as any)\n  );\n};\n"],"mappings":";;;AAGA,WAAaA,MAAM;EAIjB,SAAAA,OAAYC,MAAiD;IAAAC,eAAA,OAAAF,MAAA;IAC3D,IAAI,CAACG,IAAI,GAAGF,MAAM;EACpB;EAACG,YAAA,CAAAJ,MAAA;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAC,aAAuCC,SAAY;;MACjD,OAAO,CAAAC,EAAA,OAAI,CAACN,IAAI,cAAAM,EAAA,uBAAAA,EAAA,CAAGD,SAAS,CAAC;IAC/B;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAI,QAAA,EAAO;MACL,OAAOC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACT,IAAI,CAAC;IAC/B;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAED,SAAAO,2BAA2BC,IAAiB;MAAA,IAAAC,KAAA;MAC1C,IAAID,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE;QACtB;;MAGFH,MAAM,CAACK,OAAO,CAAC,IAAI,CAACb,IAAI,CAAC,CAACc,OAAO,CAAC,UAAAC,IAAA,EAAgB;QAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;UAAdb,GAAG,GAAAc,KAAA;UAAEE,IAAI,GAAAF,KAAA;QAC1CE,IAAkB,CAACC,gBAAgB,CAACP,KAAI,CAACZ,IAAW,EAAEW,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAGT,GAAG,CAAC,CAAC;MACrE,CAAC,CAAC;MAEF,IAAI,CAACS,IAAI,GAAGA,IAAI;IAClB;EAAC;IAAAT,GAAA;IAAAC,KAAA,EAED,SAAAiB,cAAwCf,SAAY,EAAEM,IAAc;MAClE,IAAI,CAACD,0BAA0B,CAACC,IAAI,CAAC;MAErC,IAAMU,YAAY,GAAG,IAAI,CAACrB,IAAI,CAACK,SAAS,CAAC;MACzC,IAAI,CAACgB,YAAY,EAAE;QACjB;QACA,OAAO;UAAEC,QAAQ,EAAE;QAAK,CAAE;;MAG5B,OAAOD,YAAY,CAACE,KAAK,CAAEZ,IAAI,CAACN,SAAS,CAAsB,EAAEM,IAAI,EAAEN,SAAmB,CAAC;IAC7F;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAqB,mBACEnB,SAAY,EACZM,IAAc;MAEd,IAAI,CAACD,0BAA0B,CAACC,IAAI,CAAC;MAErC,IAAMU,YAAY,GAAG,IAAI,CAACrB,IAAI,CAACK,SAAS,CAAC;MACzC,IAAI,CAACgB,YAAY,EAAE;QACjB;QACA,OAAOI,OAAO,CAACC,OAAO,CAAC;UAAEJ,QAAQ,EAAE;QAAK,CAAE,CAAC;;MAE7C,OAAOD,YAAY,CAACM,UAAU,CAC3BhB,IAAI,CAACN,SAAS,CAAsB,EACrCM,IAAI,EACJN,SAAmB,CACpB;IACH;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAoB,MAAgCZ,IAAc;MAAA,IAAAiB,MAAA;MAC5C,IAAMC,WAAW,GAAgB,EAAE;MACnCrB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACT,IAAI,CAAC,CAACc,OAAO,CAAC,UAAAZ,GAAG,EAAG;QACnC,IAAI,OAAOS,IAAI,KAAK,QAAQ,EAAE;UAC5BkB,WAAW,CAAC3B,GAAG,CAAC,GAAG0B,MAAI,CAACR,aAAa,CAAClB,GAAQ,EAAES,IAAI,CAAC;;MAEzD,CAAC,CAAC;MAEF,OAAOkB,WAAwD;IACjE;EAAC;IAAA3B,GAAA;IAAAC,KAAA,EAED,SAAAwB,WAAqChB,IAAc;MAAA,IAAAmB,MAAA;MACjD,IAAMD,WAAW,GAAgB,EAAE;MACnC,IAAME,QAAQ,GAAkD,EAAE;MAClE,IAAMtB,IAAI,GAAa,EAAE;MAEzBD,MAAM,CAACC,IAAI,CAAC,IAAI,CAACT,IAAI,CAAC,CAACc,OAAO,CAAC,UAACZ,GAAW,EAAI;QAC7CO,IAAI,CAACuB,IAAI,CAAC9B,GAAG,CAAC;QACd6B,QAAQ,CAACC,IAAI,CAACF,MAAI,CAACN,kBAAkB,CAACtB,GAAQ,EAAES,IAAI,CAAC,CAAC;MACxD,CAAC,CAAC;MAEF,OAAOc,OAAO,CAACQ,GAAG,CAACF,QAAQ,CAAC,CAACG,IAAI,CAAC,UAAAC,MAAM,EAAG;QACzC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;UACzCP,WAAW,CAACpB,IAAI,CAAC2B,CAAC,CAAC,CAAC,GAAGD,MAAM,CAACC,CAAC,CAAC;;QAElC,OAAOP,WAAwD;MACjE,CAAC,CAAC;IACJ;EAAC;EAAA,OAAAhC,MAAA;AAAA;AAGH,OAAM,SAAUyC,WAAWA,CACzBC,CAA4C;EAE5C,OAAO,IAAI1C,MAAM,CAAyB0C,CAAC,CAAC;AAC9C;AAEAD,WAAW,CAACE,OAAO,GAAG,SAASA,OAAOA,CAAA,EACC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAL,MAAA,EAAlCM,KAAkC,OAAAC,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;IAAlCF,KAAkC,CAAAE,IAAA,IAAAH,SAAA,CAAAG,IAAA;EAAA;EAErC,OAAO,IAAIhD,MAAM,CACf8C,KAAK,CACFG,GAAG,CAAC,UAAAC,KAAK;IAAA,OAAIA,KAAK,CAAC/C,IAAI;EAAA,EAAC,CACxBgD,MAAM,CAAC,UAACC,WAAW,EAAEC,YAAY;IAAA,OAAK1C,MAAM,CAAC2C,MAAM,CAACF,WAAW,EAAEC,YAAY,CAAC;EAAA,GAAE,EAAS,CAAC,CAC9F;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}